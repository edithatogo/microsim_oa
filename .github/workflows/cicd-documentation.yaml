name: CI/CD Documentation Generator

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/**'
      - 'docs/**'
  schedule:
    - cron: '0 8 * * 1'  # Weekly on Monday
  workflow_dispatch:

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install documentation tools
        run: |
          npm install -g @actions/core @actions/github
          npm install markdown-toc

      - name: Analyze Workflow Structure
        run: |
          echo "## 📚 CI/CD Documentation Generator" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generation Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count workflows
          WORKFLOW_COUNT=$(find .github/workflows -name "*.yaml" -o -name "*.yml" | wc -l)
          echo "**Total Workflows:** $WORKFLOW_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📊 Workflow Inventory" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List all workflows
          echo "| Workflow | Type | Schedule | Triggers |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|----------|----------|" >> $GITHUB_STEP_SUMMARY

          for workflow in .github/workflows/*.yaml .github/workflows/*.yml; do
            if [ -f "$workflow" ]; then
              name=$(grep -m1 "^name:" "$workflow" | sed 's/name: //' | sed 's/^"//' | sed 's/"$//')
              triggers=$(grep -A 10 "^on:" "$workflow" | grep -v "^on:" | grep -v "^  " | grep -v "^$" | head -5 | tr '\n' ', ' | sed 's/, $//')
              schedule=$(grep -A 5 "^on:" "$workflow" | grep "cron:" | head -1 | sed 's/.*cron: //' | sed "s/'//g" | sed 's/"//g')

              if [ -z "$schedule" ]; then
                schedule="Manual/Event"
              fi

              echo "| $name | CI/CD | $schedule | $triggers |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Generate Workflow Documentation
        run: |
          # Create comprehensive CI/CD documentation
          cat > docs/CICD_DOCUMENTATION.md << 'EOF'
          # 🚀 CI/CD Pipeline Documentation

          ## Overview

          This document provides comprehensive documentation for the CI/CD pipelines used in the ausoa R package project. The project utilizes GitHub Actions for automated testing, building, deployment, and quality assurance.

          ## 📊 Pipeline Architecture

          ### Core Components

          1. **Testing Pipeline** - Automated testing across multiple platforms
          2. **Build Pipeline** - Package building and validation
          3. **Security Pipeline** - Security scanning and vulnerability assessment
          4. **Documentation Pipeline** - Automated documentation generation
          5. **Deployment Pipeline** - Automated deployment to CRAN and documentation sites
          6. **Monitoring Pipeline** - Health monitoring and alerting

          ### Workflow Categories

          #### 🔧 Core Development Workflows
          - `R-CMD-check.yaml` - Package validation and testing
          - `test-coverage.yaml` - Code coverage analysis
          - `lint.yaml` - Code quality checking

          #### 📦 Build and Release Workflows
          - `pkgdown.yaml` - Documentation website generation
          - `cran-submission-automation.yaml` - CRAN submission preparation
          - `release.yaml` - Automated release management

          #### 🔒 Security Workflows
          - `advanced-codeql-analysis.yaml` - Security vulnerability scanning
          - `security-audit.yaml` - Dependency security audit
          - `secret-scanning.yaml` - Secret detection

          #### 📈 Quality Assurance Workflows
          - `performance-regression-testing.yaml` - Performance monitoring
          - `documentation-quality-assurance.yaml` - Docs quality checks
          - `automated-dependency-management.yaml` - Dependency updates

          #### 🤖 Automation Workflows
          - `automated-issue-management.yaml` - Issue triaging and management
          - `cicd-status-dashboard.yaml` - Status reporting
          - `cicd-optimization.yaml` - Pipeline optimization
          - `cicd-monitoring.yaml` - Health monitoring

          ## 🔄 Workflow Details

          ### R-CMD-check Workflow

          **Purpose:** Validate R package across multiple platforms and R versions

          **Triggers:**
          - Push to main/develop branches
          - Pull requests to main branch
          - Manual dispatch

          **Platforms:** Ubuntu, macOS, Windows
          **R Versions:** 4.0, 4.1, 4.2, 4.3
          **Duration:** ~15-25 minutes

          **Steps:**
          1. Setup R environment
          2. Install system dependencies
          3. Install R package dependencies
          4. Run R CMD check
          5. Upload check results
          6. Generate test summary

          ### pkgdown Workflow

          **Purpose:** Generate and deploy package documentation website

          **Triggers:**
          - Push to main branch
          - Manual dispatch
          - Scheduled (weekly)

          **Duration:** ~8-12 minutes

          **Steps:**
          1. Setup R environment
          2. Install pkgdown and dependencies
          3. Build documentation site
          4. Deploy to GitHub Pages
          5. Update documentation index

          ### Security Analysis Workflow

          **Purpose:** Perform comprehensive security analysis

          **Triggers:**
          - Push to main/develop branches
          - Pull requests
          - Scheduled (daily)
          - Manual dispatch

          **Tools Used:**
          - CodeQL for static analysis
          - TruffleHog for secret detection
          - Dependency vulnerability scanning

          **Duration:** ~10-15 minutes

          ### Performance Regression Testing

          **Purpose:** Monitor and detect performance regressions

          **Triggers:**
          - Push to main/develop branches
          - Pull requests
          - Scheduled (daily)

          **Tools Used:**
          - bench for benchmarking
          - profvis for profiling
          - Custom performance tests

          **Duration:** ~20-30 minutes

          ## 📋 Quality Gates

          ### Code Quality Requirements

          - **Test Coverage:** Minimum 90%
          - **Linting:** Zero linting errors
          - **Documentation:** 100% function documentation
          - **Security:** No high/critical vulnerabilities
          - **Performance:** No performance regressions >10%

          ### Platform Compatibility

          - ✅ Ubuntu 20.04+
          - ✅ macOS 11+
          - ✅ Windows Server 2019+
          - ✅ R 4.0+

          ## 🚨 Monitoring and Alerting

          ### Health Monitoring

          The CI/CD system includes comprehensive monitoring:

          - **Workflow Status:** Real-time monitoring of all workflows
          - **Performance Metrics:** Build times, resource usage
          - **Quality Metrics:** Test results, coverage, security scores
          - **Alert System:** Automatic alerts for failures and issues

          ### Alert Types

          1. **Critical Alerts:** Workflow failures, security issues
          2. **Warning Alerts:** Performance degradation, quality drops
          3. **Info Alerts:** Status updates, optimization suggestions

          ## 🔧 Maintenance and Optimization

          ### Regular Maintenance Tasks

          - Weekly: Review and optimize workflow performance
          - Monthly: Update dependencies and security tools
          - Quarterly: Review and update CI/CD architecture

          ### Optimization Strategies

          1. **Caching:** R packages, dependencies, build artifacts
          2. **Parallelization:** Run independent jobs in parallel
          3. **Resource Optimization:** Use appropriate runner sizes
          4. **Schedule Optimization:** Run heavy jobs during off-peak hours

          ## 📊 Metrics and Reporting

          ### Key Performance Indicators

          - **Build Success Rate:** Target >95%
          - **Average Build Time:** Target <15 minutes
          - **Test Pass Rate:** Target 100%
          - **Security Score:** Target A+
          - **Documentation Coverage:** Target 100%

          ### Reporting

          - Daily: Health status dashboard
          - Weekly: Performance optimization report
          - Monthly: Comprehensive CI/CD analysis

          ## 🆘 Troubleshooting

          ### Common Issues

          1. **Package Installation Failures**
             - Check dependency versions
             - Verify system requirements
             - Review error logs

          2. **Test Failures**
             - Check test environment setup
             - Review test dependencies
             - Validate test data

          3. **Documentation Build Failures**
             - Check pkgdown configuration
             - Verify Rd files
             - Review vignette builds

          ### Debug Mode

          Most workflows support debug mode by setting the `ACTIONS_STEP_DEBUG` secret to `true`.

          ## 📚 Additional Resources

          - [GitHub Actions Documentation](https://docs.github.com/en/actions)
          - [R Package Development](https://r-pkg.org/)
          - [pkgdown Documentation](https://pkgdown.r-lib.org/)
          - [CodeQL Documentation](https://codeql.github.com/docs/)

          ---

          *This documentation is automatically generated and updated by the CI/CD Documentation Generator workflow.*
          EOF

          echo "✅ Generated comprehensive CI/CD documentation" >> $GITHUB_STEP_SUMMARY

      - name: Generate Workflow Reference
        run: |
          # Create detailed workflow reference
          cat > docs/WORKFLOW_REFERENCE.md << 'EOF'
          # 📖 Workflow Reference Guide

          ## Quick Reference

          ### Workflow Triggers

          | Trigger | Workflows | Frequency |
          |---------|-----------|-----------|
          | Push to main | All core workflows | On every push |
          | Pull Request | Testing, Security, QA | On PR creation/update |
          | Schedule | Monitoring, Optimization | Daily/Weekly |
          | Manual | All workflows | On demand |
          | Release | Deployment workflows | On release |

          ### Workflow Status Indicators

          - 🟢 **Success:** All checks passed
          - 🟡 **Warning:** Some non-critical issues
          - 🔴 **Failure:** Critical issues detected
          - ⚪ **Skipped:** Workflow conditions not met

          ### Common Workflow Outputs

          #### Test Results
          - `test-results/` - Detailed test outputs
          - `coverage-report/` - Code coverage reports
          - `lint-results/` - Linting issues

          #### Build Artifacts
          - `package/` - Built R package
          - `docs/` - Generated documentation
          - `check-results/` - R CMD check outputs

          #### Security Reports
          - `codeql-results/` - Security analysis results
          - `dependency-scan/` - Dependency vulnerabilities
          - `secret-scan/` - Detected secrets

          ## 🔍 Workflow Analysis

          ### Performance Analysis

          ```bash
          # View workflow run times
          gh run list --limit 10

          # View specific workflow details
          gh run view <run-id>

          # Download workflow artifacts
          gh run download <run-id>
          ```

          ### Failure Investigation

          1. **Check Workflow Logs**
             - Navigate to Actions tab
             - Click on failed workflow
             - Review step-by-step logs

          2. **Review Error Messages**
             - Look for specific error codes
             - Check dependency conflicts
             - Verify environment setup

          3. **Reproduce Locally**
             - Use `devtools::check()`
             - Run tests with `devtools::test()`
             - Build docs with `pkgdown::build_site()`

          ### Optimization Opportunities

          - **Caching:** Implement package caching
          - **Parallelization:** Run independent jobs in parallel
          - **Resource Allocation:** Use appropriate runner sizes
          - **Schedule Adjustment:** Optimize run timing

          ## 🛠️ Maintenance Commands

          ### Update Dependencies

          ```bash
          # Update R dependencies
          renv::update()

          # Update GitHub Actions
          gh workflow run update-actions

          # Update security tools
          # Handled automatically by security workflows
          ```

          ### Clean Up Resources

          ```bash
          # Remove old workflow runs
          gh run list --limit 100 | xargs gh run delete

          # Clean up old artifacts
          gh run list --limit 50 | xargs gh run download --delete
          ```

          ### Monitor Usage

          ```bash
          # View usage statistics
          gh api repos/{owner}/{repo}/actions/runs | jq '.total_count'

          # Check storage usage
          gh api repos/{owner}/{repo} | jq '.size'
          ```

          ---

          *Generated automatically by CI/CD Documentation Generator*
          EOF

          echo "✅ Generated workflow reference guide" >> $GITHUB_STEP_SUMMARY

      - name: Update Table of Contents
        run: |
          # Generate table of contents for documentation
          for file in docs/CICD_DOCUMENTATION.md docs/WORKFLOW_REFERENCE.md; do
            if [ -f "$file" ]; then
              npx markdown-toc -i "$file"
              echo "✅ Updated TOC for $file" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Commit Documentation Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are changes to commit
          if git diff --quiet; then
            echo "✅ No documentation changes to commit" >> $GITHUB_STEP_SUMMARY
          else
            git add docs/
            git commit -m "docs: Update CI/CD documentation

- Regenerate comprehensive CI/CD documentation
- Update workflow reference guide
- Refresh table of contents
- Auto-generated by CI/CD Documentation Generator workflow"

            git push
            echo "✅ Committed documentation updates" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create Documentation Summary
        run: |
          echo "### 📚 Documentation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated Files:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`docs/CICD_DOCUMENTATION.md\` - Comprehensive CI/CD guide" >> $GITHUB_STEP_SUMMARY
          echo "- \`docs/WORKFLOW_REFERENCE.md\` - Workflow reference manual" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "**Documentation Features:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Auto-generated from workflow files" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Table of contents automatically updated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Workflow inventory with triggers and schedules" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Troubleshooting guides and best practices" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Performance metrics and optimization tips" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "**Next Update:** Scheduled for next Monday at 8:00 AM UTC" >> $GITHUB_STEP_SUMMARY
